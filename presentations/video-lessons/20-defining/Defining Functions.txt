Let's learn about Defining Functions.
You can create your own functions in Python.
In fact, this is one of the most powerful features of programming, the ability to create your own functions.
Lets' talk about two major advantages of functions:
First, they allow us to reuse code.
Second, they allow us to debug a chunk of code in isolation from the rest of the program.
To create a new function, you use the "def" keyword, which stands for "define".
As you can see, you write "def", the name of the function, an open parentheses, each of the parameters separated by commas, and a colon.
This line is called the header.
Then, you write each line of the body of the function below, indented 4 characters.
When you call a function, you are executing the code stored in the "Body" of the function.
Everything "inside" the body should be indented 4 spaces.
In the block version, this is shown visually with the bar on the left.
The body can be one or more lines long.
Sometimes, we want to define a function without writing its body just yet.
We use a special statement named "pass" to fill in the body until we're ready to write it.
Pass is a very special statement: it does absolutely nothing but take up space.
If we didn't put the word pass there, Python would crash with a syntax error.
A number of statements in Python require colons at the end.
Functions require colons at the end of the header.
One of the most common mistakes people will make is to forget the colon.
Naming a function is just like naming a variable.
The same rules even apply: you may only use letters, numbers, and underscores, and it cannot start with a number.
Choose the name of the function based on what it does at a high level - typically it should be a verb.
After you've defined a function, you can use it.
Again, we combine the name of the function with parentheses.
When you define a function, you can choose to add in parameters.
These parameters will take on the value of the arguments when the function is called.
This can be very tricky to understand.
Remember, variables are passed into a function call as values.
When you manipulate the value of the parameter, you are NOT changing the original variable.
That means that the code below prints 5 instead of 0.
When defining a function, you can make it return a value.
Most functions return some kind of value. 
We make Python return values using the "return" statement.
When your function returns something, the calling block will change its shape.
This connects to the earlier ideas about expressions and statements.
When it comes to functions, returning values make functions behave as expressions instead of statements.
Return statements can only be placed INSIDE of a function definition.
BlockPy
 will fuss at you when you try to do otherwise.
It is impossible to have a return outside of a function.
Printing and returning are two *very* different things, although that may seem confusing. 
Printing is how we write stuff to the console, while returning is used to get data out of functions.
When you return a value, you might store it in a variable and use it later or as part of an expression.
The print function does not return anything - instead it returns the special value None.
