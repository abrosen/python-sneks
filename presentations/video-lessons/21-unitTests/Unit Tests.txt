Let's learn about Unit Tests.
Once you've created a function, how do you know if it is correct?
You could carefully read over the function, but you might miss something.
Instead, programmers use collections of Unit Tests to determine if their code works as expected.
Unit testing is an important professional practice to help you find problems early, facilitate changes down the road, and make it easier to glue together pieces of code.
A unit test is pretty simple: given a fragment of code like a function, run the function for a known input and compare it to a known output.
For example, consider this function that converts feet to inches.
Below it is a collection of 5 possible inputs and the 5 expected outputs. 
These are our unit tests.
A tricky part of making unit tests is thinking of appropriate test cases.
The goal is to cover many possible scenarios, while writing the minimum number of cases.
In our conversion function before, we tried it with a small positive number, a decimal number, a negative number, a large number, and zero.
These are all representative cases
When a unit test fails, it should report the actual and expected values, so that the programmer can then debug their program.
If you only try a function with one output, you might think that the function is correct.
But until you run unit tests, you shouldn't believe that.
Of course, unit tests are not conclusive either, they are merely evidence to support the hypothesis that your code is correct.
The larger your program, the more important it is to unit test individual pieces.
However, unit tests are also helpful as you learn the basics.
Every program you write in this course will be unit tested, which means that we will try running your program against many inputs and outputs.
Just because your program appears to give the right output, you must pass all the unit tests!
